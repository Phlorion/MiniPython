/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(2), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(2), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(2), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(2), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(2), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(2), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(2), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(2), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(2), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(2), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(2), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(2), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(2), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(2), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(2), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(2), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(2), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(2), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(2), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(2), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(2), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(2), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(2), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(3), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(4), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(4), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(5), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(5), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(5), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(5), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(6), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(6), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(7), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(8), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(8), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(8), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(9), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(9), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(9), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(9), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(10), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(10), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(11), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(11), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(11), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(11), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(11), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(11), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(11), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(11), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(11), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(11), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(11), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(11), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(11), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(12), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(13), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(13), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(13), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(13), list);
		    }
		    break;


                    case 69:
		    {
			ArrayList list = new69();
			push(goTo(13), list);
		    }
		    break;


                    case 70:
		    {
			ArrayList list = new70();
			push(goTo(13), list);
		    }
		    break;


                    case 71:
		    {
			ArrayList list = new71();
			push(goTo(13), list);
		    }
		    break;


                    case 72:
		    {
			ArrayList list = new72();
			push(goTo(13), list);
		    }
		    break;


                    case 73:
		    {
			ArrayList list = new73();
			push(goTo(14), list);
		    }
		    break;


                    case 74:
		    {
			ArrayList list = new74();
			push(goTo(14), list);
		    }
		    break;


                    case 75:
		    {
			ArrayList list = new75();
			push(goTo(15), list);
		    }
		    break;


                    case 76:
		    {
			ArrayList list = new76();
			push(goTo(15), list);
		    }
		    break;


                    case 77:
		    {
			ArrayList list = new77();
			push(goTo(16), list);
		    }
		    break;


                    case 78:
		    {
			ArrayList list = new78();
			push(goTo(17), list);
		    }
		    break;


                    case 79:
		    {
			ArrayList list = new79();
			push(goTo(17), list);
		    }
		    break;


                    case 80:
		    {
			ArrayList list = new80();
			push(goTo(18), list);
		    }
		    break;


                    case 81:
		    {
			ArrayList list = new81();
			push(goTo(19), list);
		    }
		    break;


                    case 82:
		    {
			ArrayList list = new82();
			push(goTo(19), list);
		    }
		    break;


                    case 83:
		    {
			ArrayList list = new83();
			push(goTo(20), list);
		    }
		    break;


                    case 84:
		    {
			ArrayList list = new84();
			push(goTo(20), list);
		    }
		    break;


                    case 85:
		    {
			ArrayList list = new85();
			push(goTo(21), list);
		    }
		    break;


                    case 86:
		    {
			ArrayList list = new86();
			push(goTo(21), list);
		    }
		    break;


                    case 87:
		    {
			ArrayList list = new87();
			push(goTo(22), list);
		    }
		    break;


                    case 88:
		    {
			ArrayList list = new88();
			push(goTo(22), list);
		    }
		    break;


                    case 89:
		    {
			ArrayList list = new89();
			push(goTo(22), list);
		    }
		    break;


                    case 90:
		    {
			ArrayList list = new90();
			push(goTo(22), list);
		    }
		    break;


                    case 91:
		    {
			ArrayList list = new91();
			push(goTo(22), list);
		    }
		    break;


                    case 92:
		    {
			ArrayList list = new92();
			push(goTo(22), list);
		    }
		    break;


                    case 93:
		    {
			ArrayList list = new93();
			push(goTo(22), list);
		    }
		    break;


                    case 94:
		    {
			ArrayList list = new94();
			push(goTo(22), list);
		    }
		    break;


                    case 95:
		    {
			ArrayList list = new95();
			push(goTo(23), list);
		    }
		    break;


                    case 96:
		    {
			ArrayList list = new96();
			push(goTo(23), list);
		    }
		    break;


                    case 97:
		    {
			ArrayList list = new97();
			push(goTo(24), list);
		    }
		    break;


                    case 98:
		    {
			ArrayList list = new98();
			push(goTo(24), list);
		    }
		    break;


                    case 99:
		    {
			ArrayList list = new99();
			push(goTo(25), list);
		    }
		    break;


                    case 100:
		    {
			ArrayList list = new100();
			push(goTo(25), list);
		    }
		    break;


                    case 101:
		    {
			ArrayList list = new101();
			push(goTo(25), list);
		    }
		    break;


                    case 102:
		    {
			ArrayList list = new102();
			push(goTo(25), list);
		    }
		    break;


                    case 103:
		    {
			ArrayList list = new103();
			push(goTo(26), list);
		    }
		    break;


                    case 104:
		    {
			ArrayList list = new104();
			push(goTo(26), list);
		    }
		    break;


                    case 105:
		    {
			ArrayList list = new105();
			push(goTo(27), list);
		    }
		    break;


                    case 106:
		    {
			ArrayList list = new106();
			push(goTo(27), list);
		    }
		    break;


                    case 107:
		    {
			ArrayList list = new107();
			push(goTo(28), list);
		    }
		    break;


                    case 108:
		    {
			ArrayList list = new108();
			push(goTo(28), list);
		    }
		    break;


                    case 109:
		    {
			ArrayList list = new109();
			push(goTo(29), list);
		    }
		    break;


                    case 110:
		    {
			ArrayList list = new110();
			push(goTo(29), list);
		    }
		    break;


                    case 111:
		    {
			ArrayList list = new111();
			push(goTo(30), list);
		    }
		    break;


                    case 112:
		    {
			ArrayList list = new112();
			push(goTo(30), list);
		    }
		    break;


                    case 113:
		    {
			ArrayList list = new113();
			push(goTo(31), list);
		    }
		    break;


                    case 114:
		    {
			ArrayList list = new114();
			push(goTo(31), list);
		    }
		    break;


                    case 115:
		    {
			ArrayList list = new115();
			push(goTo(32), list);
		    }
		    break;


                    case 116:
		    {
			ArrayList list = new116();
			push(goTo(32), list);
		    }
		    break;


                    case 117:
		    {
			ArrayList list = new117();
			push(goTo(33), list);
		    }
		    break;


                    case 118:
		    {
			ArrayList list = new118();
			push(goTo(33), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PProgramme node1 = (PProgramme) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PProgramme pprogrammeNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pprogrammeNode1 = new AProgramme(listNode2);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PProgramme pprogrammeNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogrammeNode1 = new AProgramme(listNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommands pcommandsNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcommandsNode1 = new AStatCommands(pstatementNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommands pcommandsNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pcommandsNode1 = new AFuncCommands(pfunctionNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparisons pcomparisonsNode2;
        PStatement pstatementNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(pcomparisonsNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparisons pcomparisonsNode2;
        PStatement pstatementNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(pcomparisonsNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparisons pcomparisonsNode2;
        PStatement pstatementNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(pcomparisonsNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparisons pcomparisonsNode2;
        PStatement pstatementNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pcomparisonsNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        TId tidNode3;
        PStatement pstatementNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatement(tidNode2, tidNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        TId tidNode3;
        PStatement pstatementNode4;
        tidNode2 = (TId)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(tidNode2, tidNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new APrintStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new APrintStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignEqStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignEqStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignMineqStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignMineqStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignDiveqStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignDiveqStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new AArrayAssignStatement(tidNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList7.get(0);

        pstatementNode1 = new AArrayAssignStatement(tidNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new AAssertStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new AAssertStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        PExpression pexpressionNode3;
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
	if(pexpressionNode3 != null)
	{
	  listNode4.add(pexpressionNode3);
	}
        }

        pstatementNode1 = new AAssertStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        PExpression pexpressionNode3;
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
	if(pexpressionNode3 != null)
	{
	  listNode4.add(pexpressionNode3);
	}
        }

        pstatementNode1 = new AAssertStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFuncCallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new AFuncCallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PImportCall pimportcallNode2;
        pimportcallNode2 = (PImportCall)nodeArrayList1.get(0);

        pstatementNode1 = new AImportStatement(pimportcallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PImportCall pimportcallNode2;
        pimportcallNode2 = (PImportCall)nodeArrayList2.get(0);

        pstatementNode1 = new AImportStatement(pimportcallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        PStatement pstatementNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
        }
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(tidNode2, listNode3, pstatementNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        PStatement pstatementNode5;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
        PArguements parguementsNode3;
        parguementsNode3 = (PArguements)nodeArrayList4.get(0);
	if(parguementsNode3 != null)
	{
	  listNode4.add(parguementsNode3);
	}
        }
        pstatementNode5 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(tidNode2, listNode4, pstatementNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArguements parguementsNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        }
        {
        }

        parguementsNode1 = new AArguements(tidNode2, listNode3, listNode4);
        }
	nodeList.add(parguementsNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArguements parguementsNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        PValue pvalueNode3;
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
	if(pvalueNode3 != null)
	{
	  listNode4.add(pvalueNode3);
	}
        }
        {
        }

        parguementsNode1 = new AArguements(tidNode2, listNode4, listNode5);
        }
	nodeList.add(parguementsNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArguements parguementsNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        }
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        parguementsNode1 = new AArguements(tidNode2, listNode3, listNode5);
        }
	nodeList.add(parguementsNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArguements parguementsNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        PValue pvalueNode3;
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
	if(pvalueNode3 != null)
	{
	  listNode4.add(pvalueNode3);
	}
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        parguementsNode1 = new AArguements(tidNode2, listNode4, listNode6);
        }
	nodeList.add(parguementsNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultipleargs pmultipleargsNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
        }

        pmultipleargsNode1 = new AMultipleargs(tidNode2, listNode3);
        }
	nodeList.add(pmultipleargsNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultipleargs pmultipleargsNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
        PValue pvalueNode3;
        pvalueNode3 = (PValue)nodeArrayList3.get(0);
	if(pvalueNode3 != null)
	{
	  listNode4.add(pvalueNode3);
	}
        }

        pmultipleargsNode1 = new AMultipleargs(tidNode2, listNode4);
        }
	nodeList.add(pmultipleargsNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList2.get(0);
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubtractionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultiplicationExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivisionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AModuloExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new APowerExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AListElementExpression(tidNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFunctionCallExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pexpressionNode1 = new AValueExpression(pvalueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdExpression(tidNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ALengthExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList3.get(0);

        pexpressionNode1 = new AAsciiValExpression(tidNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList3.get(0);
        {
        }

        pexpressionNode1 = new AMinExpression(pvalueNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AMinExpression(pvalueNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList3.get(0);
        {
        }

        pexpressionNode1 = new AMaxExpression(pvalueNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AMaxExpression(pvalueNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AParenthesisExpressionExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList2.get(0);
        {
        }

        pexpressionNode1 = new AListExpression(pvalueNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AListExpression(pvalueNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList2.get(0);
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportCall pimportcallNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode4 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        }
        {
        }

        pimportcallNode1 = new AImportImportCall(pmoduleNode2, listNode3, listNode4);
        }
	nodeList.add(pimportcallNode1);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportCall pimportcallNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        PAsIdent pasidentNode3;
        pasidentNode3 = (PAsIdent)nodeArrayList3.get(0);
	if(pasidentNode3 != null)
	{
	  listNode4.add(pasidentNode3);
	}
        }
        {
        }

        pimportcallNode1 = new AImportImportCall(pmoduleNode2, listNode4, listNode5);
        }
	nodeList.add(pimportcallNode1);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportCall pimportcallNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        }
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pimportcallNode1 = new AImportImportCall(pmoduleNode2, listNode3, listNode5);
        }
	nodeList.add(pimportcallNode1);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportCall pimportcallNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        PAsIdent pasidentNode3;
        pasidentNode3 = (PAsIdent)nodeArrayList3.get(0);
	if(pasidentNode3 != null)
	{
	  listNode4.add(pasidentNode3);
	}
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pimportcallNode1 = new AImportImportCall(pmoduleNode2, listNode4, listNode6);
        }
	nodeList.add(pimportcallNode1);
        return nodeList;
    }



    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportCall pimportcallNode1;
        {
        PModule pmoduleNode2;
        TId tidNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
        }
        {
        }

        pimportcallNode1 = new AFromImportImportCall(pmoduleNode2, tidNode3, listNode4, listNode5);
        }
	nodeList.add(pimportcallNode1);
        return nodeList;
    }



    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportCall pimportcallNode1;
        {
        PModule pmoduleNode2;
        TId tidNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
        PAsIdent pasidentNode4;
        pasidentNode4 = (PAsIdent)nodeArrayList5.get(0);
	if(pasidentNode4 != null)
	{
	  listNode5.add(pasidentNode4);
	}
        }
        {
        }

        pimportcallNode1 = new AFromImportImportCall(pmoduleNode2, tidNode3, listNode5, listNode6);
        }
	nodeList.add(pimportcallNode1);
        return nodeList;
    }



    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportCall pimportcallNode1;
        {
        PModule pmoduleNode2;
        TId tidNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pimportcallNode1 = new AFromImportImportCall(pmoduleNode2, tidNode3, listNode4, listNode6);
        }
	nodeList.add(pimportcallNode1);
        return nodeList;
    }



    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportCall pimportcallNode1;
        {
        PModule pmoduleNode2;
        TId tidNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
        PAsIdent pasidentNode4;
        pasidentNode4 = (PAsIdent)nodeArrayList5.get(0);
	if(pasidentNode4 != null)
	{
	  listNode5.add(pasidentNode4);
	}
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pimportcallNode1 = new AFromImportImportCall(pmoduleNode2, tidNode3, listNode5, listNode7);
        }
	nodeList.add(pimportcallNode1);
        return nodeList;
    }



    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCmodAsIdent pcmodasidentNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        }

        pcmodasidentNode1 = new ACmodAsIdent(pmoduleNode2, listNode3);
        }
	nodeList.add(pcmodasidentNode1);
        return nodeList;
    }



    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCmodAsIdent pcmodasidentNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        PAsIdent pasidentNode3;
        pasidentNode3 = (PAsIdent)nodeArrayList3.get(0);
	if(pasidentNode3 != null)
	{
	  listNode4.add(pasidentNode3);
	}
        }

        pcmodasidentNode1 = new ACmodAsIdent(pmoduleNode2, listNode4);
        }
	nodeList.add(pcmodasidentNode1);
        return nodeList;
    }



    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCidentAsIdent pcidentasidentNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
        }

        pcidentasidentNode1 = new ACidentAsIdent(tidNode2, listNode3);
        }
	nodeList.add(pcidentasidentNode1);
        return nodeList;
    }



    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCidentAsIdent pcidentasidentNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
        PAsIdent pasidentNode3;
        pasidentNode3 = (PAsIdent)nodeArrayList3.get(0);
	if(pasidentNode3 != null)
	{
	  listNode4.add(pasidentNode3);
	}
        }

        pcidentasidentNode1 = new ACidentAsIdent(tidNode2, listNode4);
        }
	nodeList.add(pcidentasidentNode1);
        return nodeList;
    }



    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAsIdent pasidentNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pasidentNode1 = new AAsIdent(tidNode2);
        }
	nodeList.add(pasidentNode1);
        return nodeList;
    }



    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PModule pmoduleNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);

        pmoduleNode1 = new AModule(listNode2, tidNode3);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PModule pmoduleNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);

        pmoduleNode1 = new AModule(listNode3, tidNode4);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    ArrayList new80()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdentDot pidentdotNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidentdotNode1 = new AIdentDot(tidNode2);
        }
	nodeList.add(pidentdotNode1);
        return nodeList;
    }



    ArrayList new81()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PComparisons pcomparisonsNode2;
        PComparisons pcomparisonsNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList1.get(0);
        pcomparisonsNode3 = (PComparisons)nodeArrayList3.get(0);

        pcomparisonsNode1 = new AOrComparisons(pcomparisonsNode2, pcomparisonsNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new82()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        pcomparisonsNode1 = (PComparisons)nodeArrayList1.get(0);
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new83()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PComparisons pcomparisonsNode2;
        PComparisons pcomparisonsNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList1.get(0);
        pcomparisonsNode3 = (PComparisons)nodeArrayList3.get(0);

        pcomparisonsNode1 = new AAndComparisons(pcomparisonsNode2, pcomparisonsNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new84()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        pcomparisonsNode1 = (PComparisons)nodeArrayList1.get(0);
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new85()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PComparisons pcomparisonsNode2;
        pcomparisonsNode2 = (PComparisons)nodeArrayList2.get(0);

        pcomparisonsNode1 = new ANotComparisons(pcomparisonsNode2);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new86()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        pcomparisonsNode1 = (PComparisons)nodeArrayList1.get(0);
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new87()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new AGreatComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new88()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new ALessComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new89()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new AGreatEqComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new90()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new ALessEqComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new91()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new ANotEqComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new92()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new ACompEqComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new93()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {

        pcomparisonsNode1 = new ATrueComparisons();
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new94()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {

        pcomparisonsNode1 = new AFalseComparisons();
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new95()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        }

        pfunctioncallNode1 = new AFunctionCall(tidNode2, listNode3);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new96()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        PArglist parglistNode3;
        parglistNode3 = (PArglist)nodeArrayList3.get(0);
	if(parglistNode3 != null)
	{
	  listNode4.add(parglistNode3);
	}
        }

        pfunctioncallNode1 = new AFunctionCall(tidNode2, listNode4);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new97()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new AArglist(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new98()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArglist(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new99()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TId tidNode2;
        PFunctionCall pfunctioncallNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList3.get(0);

        pvalueNode1 = new AFuncCallValue(tidNode2, pfunctioncallNode3);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new100()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumberValue(tnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new101()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pvalueNode1 = new ASlitValue(tstringliteralNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new102()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNone tnoneNode2;
        tnoneNode2 = (TNone)nodeArrayList1.get(0);

        pvalueNode1 = new ANoneValue(tnoneNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new103()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommands pcommandsNode1;
        pcommandsNode1 = (PCommands)nodeArrayList1.get(0);
	if(pcommandsNode1 != null)
	{
	  listNode2.add(pcommandsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new104()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommands pcommandsNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommandsNode2 = (PCommands)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandsNode2 != null)
	{
	  listNode3.add(pcommandsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new105()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new106()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new107()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new108()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PExpression pexpressionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new109()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PMultipleargs pmultipleargsNode1;
        pmultipleargsNode1 = (PMultipleargs)nodeArrayList1.get(0);
	if(pmultipleargsNode1 != null)
	{
	  listNode2.add(pmultipleargsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new110()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PMultipleargs pmultipleargsNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pmultipleargsNode2 = (PMultipleargs)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultipleargsNode2 != null)
	{
	  listNode3.add(pmultipleargsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new111()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList1.get(0);
	if(pvalueNode1 != null)
	{
	  listNode2.add(pvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new112()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PValue pvalueNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pvalueNode2 = (PValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvalueNode2 != null)
	{
	  listNode3.add(pvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new113()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCmodAsIdent pcmodasidentNode1;
        pcmodasidentNode1 = (PCmodAsIdent)nodeArrayList1.get(0);
	if(pcmodasidentNode1 != null)
	{
	  listNode2.add(pcmodasidentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new114()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCmodAsIdent pcmodasidentNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcmodasidentNode2 = (PCmodAsIdent)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcmodasidentNode2 != null)
	{
	  listNode3.add(pcmodasidentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new115()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCidentAsIdent pcidentasidentNode1;
        pcidentasidentNode1 = (PCidentAsIdent)nodeArrayList1.get(0);
	if(pcidentasidentNode1 != null)
	{
	  listNode2.add(pcidentasidentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new116()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCidentAsIdent pcidentasidentNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcidentasidentNode2 = (PCidentAsIdent)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcidentasidentNode2 != null)
	{
	  listNode3.add(pcidentasidentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new117()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PIdentDot pidentdotNode1;
        pidentdotNode1 = (PIdentDot)nodeArrayList1.get(0);
	if(pidentdotNode1 != null)
	{
	  listNode2.add(pidentdotNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new118()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PIdentDot pidentdotNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pidentdotNode2 = (PIdentDot)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pidentdotNode2 != null)
	{
	  listNode3.add(pidentdotNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {30, SHIFT, 4}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 2}, {12, SHIFT, 20}, {14, SHIFT, 21}, {17, SHIFT, 22}, {26, SHIFT, 23}, {28, SHIFT, 24}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 3}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 4}, {47, SHIFT, 44}, },
			{{-1, ERROR, 5}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 6}, {12, SHIFT, 20}, {14, SHIFT, 21}, {17, SHIFT, 22}, {26, SHIFT, 23}, {28, SHIFT, 24}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 7}, {47, SHIFT, 47}, },
			{{-1, ERROR, 8}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 9}, {47, SHIFT, 49}, },
			{{-1, ERROR, 10}, {47, SHIFT, 49}, },
			{{-1, ERROR, 11}, {2, SHIFT, 54}, {6, SHIFT, 55}, {11, SHIFT, 56}, {12, SHIFT, 57}, {14, SHIFT, 58}, },
			{{-1, ERROR, 12}, {49, ACCEPT, -1}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {30, SHIFT, 4}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 19}, {0, SHIFT, 60}, {20, SHIFT, 61}, {21, SHIFT, 62}, {36, SHIFT, 63}, {37, SHIFT, 64}, {38, SHIFT, 65}, {39, SHIFT, 66}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 67}, },
			{{-1, ERROR, 20}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 21}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 71}, {48, SHIFT, 32}, },
			{{-1, ERROR, 22}, {12, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 23}, {28, SHIFT, 24}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 25}, {12, SHIFT, 74}, },
			{{-1, ERROR, 26}, {12, SHIFT, 75}, },
			{{-1, ERROR, 27}, {12, SHIFT, 76}, },
			{{-1, ERROR, 28}, {12, SHIFT, 77}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 54}, {12, SHIFT, 57}, {14, SHIFT, 78}, {44, SHIFT, 79}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 33}, {1, SHIFT, 80}, {3, SHIFT, 81}, {9, SHIFT, 82}, {10, SHIFT, 83}, {22, SHIFT, 84}, {23, SHIFT, 85}, {24, SHIFT, 86}, {25, SHIFT, 87}, },
			{{-1, REDUCE, 42}, {5, SHIFT, 88}, {7, SHIFT, 89}, {8, SHIFT, 90}, },
			{{-1, REDUCE, 48}, {4, SHIFT, 91}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 37}, {19, SHIFT, 92}, {27, SHIFT, 93}, },
			{{-1, REDUCE, 82}, {18, SHIFT, 94}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 12}, {1, SHIFT, 80}, {3, SHIFT, 81}, {16, SHIFT, 95}, },
			{{-1, ERROR, 44}, {12, SHIFT, 98}, },
			{{-1, REDUCE, 10}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, ERROR, 46}, {19, SHIFT, 92}, {27, SHIFT, 99}, },
			{{-1, ERROR, 47}, {35, SHIFT, 100}, },
			{{-1, REDUCE, 24}, {1, SHIFT, 80}, {3, SHIFT, 81}, {16, SHIFT, 95}, },
			{{-1, REDUCE, 78}, {44, SHIFT, 102}, },
			{{-1, REDUCE, 65}, {16, SHIFT, 103}, {40, SHIFT, 104}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 52}, {47, SHIFT, 108}, },
			{{-1, ERROR, 53}, {41, SHIFT, 110}, },
			{{-1, ERROR, 54}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 55}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 56}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 57}, {12, SHIFT, 20}, {13, SHIFT, 114}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 58}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 61}, {12, SHIFT, 20}, {14, SHIFT, 21}, {17, SHIFT, 22}, {26, SHIFT, 23}, {28, SHIFT, 24}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 62}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 63}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 64}, {12, SHIFT, 20}, {14, SHIFT, 21}, {17, SHIFT, 22}, {26, SHIFT, 23}, {28, SHIFT, 24}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 65}, {47, SHIFT, 122}, },
			{{-1, ERROR, 66}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 67}, {2, SHIFT, 124}, {6, SHIFT, 125}, {11, SHIFT, 126}, {12, SHIFT, 57}, {14, SHIFT, 127}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 70}, {1, SHIFT, 80}, {3, SHIFT, 81}, {13, SHIFT, 128}, },
			{{-1, ERROR, 71}, {44, SHIFT, 79}, },
			{{-1, ERROR, 72}, {15, SHIFT, 129}, {16, SHIFT, 130}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 74}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 75}, {47, SHIFT, 134}, },
			{{-1, ERROR, 76}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 71}, {48, SHIFT, 32}, },
			{{-1, ERROR, 77}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 71}, {48, SHIFT, 32}, },
			{{-1, ERROR, 78}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 79}, {47, SHIFT, 138}, },
			{{-1, ERROR, 80}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 81}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 82}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 83}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 84}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 85}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 86}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 87}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 88}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 89}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 90}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 91}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 92}, {12, SHIFT, 20}, {14, SHIFT, 21}, {17, SHIFT, 22}, {26, SHIFT, 23}, {28, SHIFT, 24}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 93}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 94}, {12, SHIFT, 20}, {14, SHIFT, 21}, {17, SHIFT, 22}, {26, SHIFT, 23}, {28, SHIFT, 24}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 95}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 14}, {16, SHIFT, 95}, },
			{{-1, ERROR, 98}, {13, SHIFT, 157}, {47, SHIFT, 158}, },
			{{-1, ERROR, 99}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 100}, {47, SHIFT, 161}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 103}, {47, SHIFT, 49}, },
			{{-1, ERROR, 104}, {47, SHIFT, 163}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 66}, {16, SHIFT, 103}, },
			{{-1, REDUCE, 67}, {16, SHIFT, 103}, },
			{{-1, REDUCE, 79}, {44, SHIFT, 102}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 110}, {47, SHIFT, 166}, },
			{{-1, REDUCE, 18}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 20}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 16}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 97}, {1, SHIFT, 80}, {3, SHIFT, 81}, {16, SHIFT, 95}, },
			{{-1, ERROR, 116}, {13, SHIFT, 168}, },
			{{-1, ERROR, 117}, {1, SHIFT, 80}, {3, SHIFT, 81}, {15, SHIFT, 169}, },
			{{-1, ERROR, 118}, {19, SHIFT, 92}, {27, SHIFT, 170}, },
			{{-1, REDUCE, 13}, {1, SHIFT, 80}, {3, SHIFT, 81}, {16, SHIFT, 95}, },
			{{-1, REDUCE, 11}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, ERROR, 121}, {19, SHIFT, 92}, {27, SHIFT, 172}, },
			{{-1, ERROR, 122}, {35, SHIFT, 173}, },
			{{-1, REDUCE, 25}, {1, SHIFT, 80}, {3, SHIFT, 81}, {16, SHIFT, 95}, },
			{{-1, ERROR, 124}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 125}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 126}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, ERROR, 127}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 130}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 71}, {48, SHIFT, 32}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 132}, {15, SHIFT, 180}, {16, SHIFT, 130}, },
			{{-1, ERROR, 133}, {1, SHIFT, 80}, {3, SHIFT, 81}, {13, SHIFT, 182}, },
			{{-1, ERROR, 134}, {13, SHIFT, 183}, },
			{{-1, ERROR, 135}, {13, SHIFT, 184}, {16, SHIFT, 130}, },
			{{-1, ERROR, 136}, {13, SHIFT, 186}, {16, SHIFT, 130}, },
			{{-1, ERROR, 137}, {1, SHIFT, 80}, {3, SHIFT, 81}, {15, SHIFT, 188}, },
			{{-1, ERROR, 138}, {12, SHIFT, 57}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 43}, {5, SHIFT, 88}, {7, SHIFT, 89}, {8, SHIFT, 90}, },
			{{-1, REDUCE, 44}, {5, SHIFT, 88}, {7, SHIFT, 89}, {8, SHIFT, 90}, },
			{{-1, REDUCE, 92}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 91}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 90}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 89}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 88}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 87}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 45}, {4, SHIFT, 91}, },
			{{-1, REDUCE, 46}, {4, SHIFT, 91}, },
			{{-1, REDUCE, 47}, {4, SHIFT, 91}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 81}, {18, SHIFT, 94}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 32}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 157}, {27, SHIFT, 189}, },
			{{-1, REDUCE, 35}, {11, SHIFT, 190}, {16, SHIFT, 191}, },
			{{-1, ERROR, 159}, {13, SHIFT, 195}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 161}, {27, SHIFT, 196}, },
			{{-1, REDUCE, 73}, {40, SHIFT, 104}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 68}, {16, SHIFT, 103}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 69}, {16, SHIFT, 198}, {40, SHIFT, 104}, },
			{{-1, REDUCE, 98}, {16, SHIFT, 95}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 169}, {11, SHIFT, 202}, },
			{{-1, ERROR, 170}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 15}, {16, SHIFT, 95}, },
			{{-1, ERROR, 172}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 173}, {47, SHIFT, 205}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 19}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 21}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 17}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, ERROR, 178}, {1, SHIFT, 80}, {3, SHIFT, 81}, {15, SHIFT, 206}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 185}, {13, SHIFT, 207}, {16, SHIFT, 130}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 187}, {13, SHIFT, 208}, {16, SHIFT, 130}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 189}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 190}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 71}, {48, SHIFT, 32}, },
			{{-1, ERROR, 191}, {47, SHIFT, 211}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 36}, {16, SHIFT, 191}, },
			{{-1, REDUCE, 37}, {16, SHIFT, 191}, },
			{{-1, ERROR, 195}, {27, SHIFT, 214}, },
			{{-1, ERROR, 196}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 198}, {47, SHIFT, 216}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 70}, {16, SHIFT, 198}, },
			{{-1, REDUCE, 71}, {16, SHIFT, 198}, },
			{{-1, ERROR, 202}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 205}, {27, SHIFT, 220}, },
			{{-1, ERROR, 206}, {11, SHIFT, 221}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 39}, {11, SHIFT, 190}, },
			{{-1, REDUCE, 38}, {16, SHIFT, 191}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 214}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 75}, {40, SHIFT, 104}, },
			{{-1, REDUCE, 72}, {16, SHIFT, 198}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 22}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
			{{-1, ERROR, 220}, {0, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {36, SHIFT, 5}, {37, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {41, SHIFT, 9}, {42, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 221}, {12, SHIFT, 20}, {14, SHIFT, 21}, {31, SHIFT, 25}, {32, SHIFT, 26}, {33, SHIFT, 27}, {34, SHIFT, 28}, {43, SHIFT, 29}, {46, SHIFT, 30}, {47, SHIFT, 31}, {48, SHIFT, 32}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 23}, {1, SHIFT, 80}, {3, SHIFT, 81}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 12}, },
			{{-1, 13}, {18, 59}, },
			{{-1, 14}, {93, 153}, {99, 160}, {170, 203}, {172, 204}, {189, 209}, {196, 215}, {214, 223}, {220, 225}, },
			{{-1, 96}, {48, 101}, {97, 156}, {123, 174}, {167, 156}, {171, 156}, },
			{{-1, 15}, },
			{{-1, 159}, },
			{{-1, 192}, {194, 213}, {212, 213}, },
			{{-1, 193}, {211, 222}, },
			{{-1, 33}, {3, 43}, {5, 45}, {8, 48}, {20, 70}, {54, 111}, {55, 112}, {56, 113}, {57, 115}, {58, 117}, {62, 119}, {63, 120}, {66, 123}, {74, 133}, {78, 137}, {82, 142}, {83, 143}, {84, 144}, {85, 145}, {86, 146}, {87, 147}, {95, 155}, {124, 175}, {125, 176}, {126, 177}, {127, 178}, {202, 219}, {221, 226}, },
			{{-1, 34}, {80, 140}, {81, 141}, },
			{{-1, 35}, {88, 148}, {89, 149}, {90, 150}, },
			{{-1, 36}, {91, 151}, },
			{{-1, 131}, {132, 181}, {185, 181}, {187, 181}, },
			{{-1, 16}, {19, 68}, },
			{{-1, 105}, {107, 165}, {164, 165}, },
			{{-1, 199}, {201, 218}, {217, 218}, },
			{{-1, 106}, {162, 197}, {166, 200}, {216, 224}, },
			{{-1, 50}, {10, 53}, {103, 162}, },
			{{-1, 51}, {52, 109}, },
			{{-1, 37}, {6, 46}, {61, 118}, {64, 121}, },
			{{-1, 38}, {92, 152}, },
			{{-1, 39}, {94, 154}, },
			{{-1, 40}, {22, 73}, },
			{{-1, 41}, {0, 17}, {18, 17}, {19, 69}, {79, 139}, {93, 17}, {99, 17}, {170, 17}, {172, 17}, {189, 17}, {196, 17}, {214, 17}, {220, 17}, },
			{{-1, 116}, },
			{{-1, 42}, {21, 72}, {76, 135}, {77, 136}, {130, 179}, {190, 210}, },
			{{-1, 18}, },
			{{-1, 19}, },
			{{-1, 97}, {115, 167}, {119, 171}, },
			{{-1, 194}, {193, 212}, },
			{{-1, 132}, {135, 185}, {136, 187}, },
			{{-1, 107}, {106, 164}, },
			{{-1, 201}, {200, 217}, },
			{{-1, 52}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'if', 'print', 'def', 'return', 'while', 'for', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, 'if', 'print', 'return', 'while', 'for', 'assert', 'import', 'from', id",
			"expecting: '(', '[', 'not', 'true', 'false', 'len', 'ascii', 'max', 'min', 'None', number, id, string literal",
			"expecting: '(', '[', 'len', 'ascii', 'max', 'min', 'None', number, id, string literal",
			"expecting: id",
			"expecting: '-=', '/=', '=', '(', '['",
			"expecting: EOF",
			"expecting: 'None', number, id, string literal",
			"expecting: '(', '[', 'true', 'false', 'len', 'ascii', 'max', 'min', 'None', number, id, string literal",
			"expecting: 'and', 'or', ':'",
			"expecting: '('",
			"expecting: tab, '+', '-', '**', '*', '/', '%', '==', '!=', ')', ']', ',', 'and', 'or', 'if', 'print', '<=', '>=', '<', '>', ':', 'def', 'return', 'while', 'for', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, '+', '-', '**', '*', '/', '%', '==', '!=', '(', ')', '[', ']', ',', 'and', 'or', 'if', 'print', '<=', '>=', '<', '>', ':', 'def', 'return', 'while', 'for', 'assert', 'import', 'from', '.', id, EOF",
			"expecting: '+', '-', '==', '!=', '<=', '>=', '<', '>'",
			"expecting: tab, '+', '-', '*', '/', '%', '==', '!=', ')', ']', ',', 'and', 'or', 'if', 'print', '<=', '>=', '<', '>', ':', 'def', 'return', 'while', 'for', 'assert', 'import', 'from', id, EOF",
			"expecting: 'or', ':'",
			"expecting: tab, '+', '-', ',', 'if', 'print', 'def', 'return', 'while', 'for', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, '+', '-', 'if', 'print', 'def', 'return', 'while', 'for', 'assert', 'import', 'from', id, EOF",
			"expecting: 'in'",
			"expecting: tab, ',', 'if', 'print', 'def', 'return', 'while', 'for', 'assert', 'as', 'import', 'from', '.', id, EOF",
			"expecting: tab, ',', 'if', 'print', 'def', 'return', 'while', 'for', 'assert', 'as', 'import', 'from', id, EOF",
			"expecting: 'import'",
			"expecting: '(', ')', '[', 'len', 'ascii', 'max', 'min', 'None', number, id, string literal",
			"expecting: '+', '-', ')'",
			"expecting: '.'",
			"expecting: ']', ','",
			"expecting: tab, ')', ',', 'if', 'print', 'def', 'return', 'while', 'for', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, ',', 'if', 'print', 'def', 'return', 'while', 'for', 'assert', 'import', 'from', id, EOF",
			"expecting: ')', id",
			"expecting: '+', '-', ')', ','",
			"expecting: ')'",
			"expecting: '+', '-', ']'",
			"expecting: ')', ']', ','",
			"expecting: ')', ','",
			"expecting: '+', '-', 'and', 'or', ':'",
			"expecting: tab, '+', '-', ')', ',', 'if', 'print', 'def', 'return', 'while', 'for', 'assert', 'import', 'from', id, EOF",
			"expecting: ':'",
			"expecting: '=', ')', ','",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 3, 2, 4, 3, 4, 4, 5, 6, 0, 0, 0, 0, 0, 0, 1, 3, 7, 8, 9, 9, 10, 10, 10, 10, 11, 11, 12, 11, 13, 14, 11, 11, 15, 9, 9, 9, 11, 11, 16, 10, 17, 15, 18, 16, 19, 20, 4, 4, 21, 3, 3, 3, 22, 3, 0, 1, 2, 3, 3, 2, 4, 3, 5, 0, 0, 23, 24, 25, 9, 3, 4, 7, 7, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 2, 3, 26, 27, 28, 1, 4, 0, 4, 4, 4, 27, 27, 27, 19, 4, 4, 17, 17, 17, 11, 29, 30, 31, 15, 16, 17, 15, 18, 16, 3, 3, 3, 3, 11, 11, 7, 32, 25, 23, 30, 33, 33, 31, 10, 11, 14, 14, 34, 34, 34, 34, 34, 34, 11, 11, 11, 11, 9, 0, 9, 35, 26, 36, 37, 30, 0, 36, 20, 27, 27, 27, 20, 33, 11, 38, 1, 27, 1, 4, 0, 17, 17, 17, 31, 32, 11, 32, 11, 11, 11, 33, 11, 33, 11, 1, 7, 4, 33, 33, 33, 36, 1, 27, 4, 27, 27, 27, 3, 0, 0, 36, 38, 11, 11, 0, 33, 37, 33, 33, 1, 0, 20, 27, 27, 17, 1, 3, 33, 0, 27, 0, 17, 
        };*/
}
