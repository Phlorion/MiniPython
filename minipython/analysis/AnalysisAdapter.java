/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    public void caseAStatCommands(AStatCommands node)
    {
        defaultCase(node);
    }

    public void caseAExprCommands(AExprCommands node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignopStatement(AAssignopStatement node)
    {
        defaultCase(node);
    }

    public void caseAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        defaultCase(node);
    }

    public void caseAImportStatement(AImportStatement node)
    {
        defaultCase(node);
    }

    public void caseACommaExpression(ACommaExpression node)
    {
        defaultCase(node);
    }

    public void caseAEqAssignop(AEqAssignop node)
    {
        defaultCase(node);
    }

    public void caseAMineqAssignop(AMineqAssignop node)
    {
        defaultCase(node);
    }

    public void caseADiveqAssignop(ADiveqAssignop node)
    {
        defaultCase(node);
    }

    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    public void caseAArguements(AArguements node)
    {
        defaultCase(node);
    }

    public void caseAMultipleargs(AMultipleargs node)
    {
        defaultCase(node);
    }

    public void caseAAssignval(AAssignval node)
    {
        defaultCase(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        defaultCase(node);
    }

    public void caseAListElementExpression(AListElementExpression node)
    {
        defaultCase(node);
    }

    public void caseAFuntionCallExpression(AFuntionCallExpression node)
    {
        defaultCase(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdExpression(AIdExpression node)
    {
        defaultCase(node);
    }

    public void caseALengthExpression(ALengthExpression node)
    {
        defaultCase(node);
    }

    public void caseAAsciiValExpression(AAsciiValExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinMaxExpression(AMinMaxExpression node)
    {
        defaultCase(node);
    }

    public void caseAParenthesisExpressionExpression(AParenthesisExpressionExpression node)
    {
        defaultCase(node);
    }

    public void caseAListExpression(AListExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationAddition(AMultiplicationAddition node)
    {
        defaultCase(node);
    }

    public void caseAAdditionAddition(AAdditionAddition node)
    {
        defaultCase(node);
    }

    public void caseASubtractionAddition(ASubtractionAddition node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultCase(node);
    }

    public void caseADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAModuloMultiplication(AModuloMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAPowerMultiplication(APowerMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAPowerPower(APowerPower node)
    {
        defaultCase(node);
    }

    public void caseAFactorPower(AFactorPower node)
    {
        defaultCase(node);
    }

    public void caseANumberFactor(ANumberFactor node)
    {
        defaultCase(node);
    }

    public void caseAExpressionFactor(AExpressionFactor node)
    {
        defaultCase(node);
    }

    public void caseAMinMinMax(AMinMinMax node)
    {
        defaultCase(node);
    }

    public void caseAMaxMinMax(AMaxMinMax node)
    {
        defaultCase(node);
    }

    public void caseAMultipleValues(AMultipleValues node)
    {
        defaultCase(node);
    }

    public void caseAImportImportCall(AImportImportCall node)
    {
        defaultCase(node);
    }

    public void caseAFromImportImportCall(AFromImportImportCall node)
    {
        defaultCase(node);
    }

    public void caseACmodAsIdent(ACmodAsIdent node)
    {
        defaultCase(node);
    }

    public void caseACidentAsIdent(ACidentAsIdent node)
    {
        defaultCase(node);
    }

    public void caseAAsIdent(AAsIdent node)
    {
        defaultCase(node);
    }

    public void caseAModule(AModule node)
    {
        defaultCase(node);
    }

    public void caseAIdentDot(AIdentDot node)
    {
        defaultCase(node);
    }

    public void caseACompAndComparisonOr(ACompAndComparisonOr node)
    {
        defaultCase(node);
    }

    public void caseAOrComparisonOr(AOrComparisonOr node)
    {
        defaultCase(node);
    }

    public void caseACompNotComparisonAnd(ACompNotComparisonAnd node)
    {
        defaultCase(node);
    }

    public void caseAAndComparisonAnd(AAndComparisonAnd node)
    {
        defaultCase(node);
    }

    public void caseAComparisonComparisonNot(AComparisonComparisonNot node)
    {
        defaultCase(node);
    }

    public void caseAComparisonNot(AComparisonNot node)
    {
        defaultCase(node);
    }

    public void caseAGreatComparison(AGreatComparison node)
    {
        defaultCase(node);
    }

    public void caseALessComparison(ALessComparison node)
    {
        defaultCase(node);
    }

    public void caseAGreatEqComparison(AGreatEqComparison node)
    {
        defaultCase(node);
    }

    public void caseALessEqComparison(ALessEqComparison node)
    {
        defaultCase(node);
    }

    public void caseANotEqComparison(ANotEqComparison node)
    {
        defaultCase(node);
    }

    public void caseACompEqComparison(ACompEqComparison node)
    {
        defaultCase(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        defaultCase(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAArglist(AArglist node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallValue(AFuncCallValue node)
    {
        defaultCase(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        defaultCase(node);
    }

    public void caseADoubleQuoteStringValue(ADoubleQuoteStringValue node)
    {
        defaultCase(node);
    }

    public void caseASingleQuoteStringValue(ASingleQuoteStringValue node)
    {
        defaultCase(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMineq(TMineq node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTPow(TPow node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiveq(TDiveq node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTEqualEqual(TEqualEqual node)
    {
        defaultCase(node);
    }

    public void caseTNotEqual(TNotEqual node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBra(TLBra node)
    {
        defaultCase(node);
    }

    public void caseTRBra(TRBra node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTLessEqual(TLessEqual node)
    {
        defaultCase(node);
    }

    public void caseTGreatEqual(TGreatEqual node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTAscii(TAscii node)
    {
        defaultCase(node);
    }

    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    public void caseTNone(TNone node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTStringSingleQuote(TStringSingleQuote node)
    {
        defaultCase(node);
    }

    public void caseTStringDoubleQuote(TStringDoubleQuote node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
