/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAProgramme(AProgramme node);
    void caseAStatCommands(AStatCommands node);
    void caseAFuncCommands(AFuncCommands node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAssignEqStatement(AAssignEqStatement node);
    void caseAAssignMineqStatement(AAssignMineqStatement node);
    void caseAAssignDiveqStatement(AAssignDiveqStatement node);
    void caseAArrayAssignStatement(AArrayAssignStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAFuncCallStatement(AFuncCallStatement node);
    void caseAImportStatement(AImportStatement node);
    void caseAFunction(AFunction node);
    void caseAArguements(AArguements node);
    void caseAMultipleargs(AMultipleargs node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubtractionExpression(ASubtractionExpression node);
    void caseAMultiplicationExpression(AMultiplicationExpression node);
    void caseADivisionExpression(ADivisionExpression node);
    void caseAModuloExpression(AModuloExpression node);
    void caseAPowerExpression(APowerExpression node);
    void caseAListElementExpression(AListElementExpression node);
    void caseAFunctionCallExpression(AFunctionCallExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAIdExpression(AIdExpression node);
    void caseALengthExpression(ALengthExpression node);
    void caseAAsciiValExpression(AAsciiValExpression node);
    void caseAMinExpression(AMinExpression node);
    void caseAMaxExpression(AMaxExpression node);
    void caseAParenthesisExpressionExpression(AParenthesisExpressionExpression node);
    void caseAListExpression(AListExpression node);
    void caseAImportImportCall(AImportImportCall node);
    void caseAFromImportImportCall(AFromImportImportCall node);
    void caseACmodAsIdent(ACmodAsIdent node);
    void caseACidentAsIdent(ACidentAsIdent node);
    void caseAAsIdent(AAsIdent node);
    void caseAModule(AModule node);
    void caseAIdentDot(AIdentDot node);
    void caseAOrComparisons(AOrComparisons node);
    void caseAAndComparisons(AAndComparisons node);
    void caseANotComparisons(ANotComparisons node);
    void caseAGreatComparisons(AGreatComparisons node);
    void caseALessComparisons(ALessComparisons node);
    void caseAGreatEqComparisons(AGreatEqComparisons node);
    void caseALessEqComparisons(ALessEqComparisons node);
    void caseANotEqComparisons(ANotEqComparisons node);
    void caseACompEqComparisons(ACompEqComparisons node);
    void caseATrueComparisons(ATrueComparisons node);
    void caseAFalseComparisons(AFalseComparisons node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAArglist(AArglist node);
    void caseAFuncCallValue(AFuncCallValue node);
    void caseANumberValue(ANumberValue node);
    void caseASlitValue(ASlitValue node);
    void caseANoneValue(ANoneValue node);

    void caseTTab(TTab node);
    void caseTPlus(TPlus node);
    void caseTMineq(TMineq node);
    void caseTMinus(TMinus node);
    void caseTPow(TPow node);
    void caseTMult(TMult node);
    void caseTDiveq(TDiveq node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTEqualEqual(TEqualEqual node);
    void caseTNotEqual(TNotEqual node);
    void caseTEq(TEq node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBra(TLBra node);
    void caseTRBra(TRBra node);
    void caseTComma(TComma node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTIf(TIf node);
    void caseTPrint(TPrint node);
    void caseTLessEqual(TLessEqual node);
    void caseTGreatEqual(TGreatEqual node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTElse(TElse node);
    void caseTDef(TDef node);
    void caseTLen(TLen node);
    void caseTAscii(TAscii node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTIn(TIn node);
    void caseTReturn(TReturn node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTAssert(TAssert node);
    void caseTAs(TAs node);
    void caseTImport(TImport node);
    void caseTFrom(TFrom node);
    void caseTNone(TNone node);
    void caseTDot(TDot node);
    void caseTQuote(TQuote node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseTStringLiteral(TStringLiteral node);
    void caseEOF(EOF node);
}
