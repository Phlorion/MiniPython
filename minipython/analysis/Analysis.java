/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAProgramme(AProgramme node);
    void caseAStatCommands(AStatCommands node);
    void caseAExprCommands(AExprCommands node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAssignopStatement(AAssignopStatement node);
    void caseAArrayAssignStatement(AArrayAssignStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAFuncCallStatement(AFuncCallStatement node);
    void caseAImportStatement(AImportStatement node);
    void caseACommaExpression(ACommaExpression node);
    void caseAEqAssignop(AEqAssignop node);
    void caseAMineqAssignop(AMineqAssignop node);
    void caseADiveqAssignop(ADiveqAssignop node);
    void caseAFunction(AFunction node);
    void caseAArguements(AArguements node);
    void caseAMultipleargs(AMultipleargs node);
    void caseAAssignval(AAssignval node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseAListElementExpression(AListElementExpression node);
    void caseAFuntionCallExpression(AFuntionCallExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAIdExpression(AIdExpression node);
    void caseALengthExpression(ALengthExpression node);
    void caseAAsciiValExpression(AAsciiValExpression node);
    void caseAMinMaxExpression(AMinMaxExpression node);
    void caseAParenthesisExpressionExpression(AParenthesisExpressionExpression node);
    void caseAListExpression(AListExpression node);
    void caseAMultiplicationAddition(AMultiplicationAddition node);
    void caseAAdditionAddition(AAdditionAddition node);
    void caseASubtractionAddition(ASubtractionAddition node);
    void caseAMultiplicationMultiplication(AMultiplicationMultiplication node);
    void caseADivisionMultiplication(ADivisionMultiplication node);
    void caseAModuloMultiplication(AModuloMultiplication node);
    void caseAPowerMultiplication(APowerMultiplication node);
    void caseAPowerPower(APowerPower node);
    void caseAFactorPower(AFactorPower node);
    void caseANumberFactor(ANumberFactor node);
    void caseAExpressionFactor(AExpressionFactor node);
    void caseAMinMinMax(AMinMinMax node);
    void caseAMaxMinMax(AMaxMinMax node);
    void caseAMultipleValues(AMultipleValues node);
    void caseAImportImportCall(AImportImportCall node);
    void caseAFromImportImportCall(AFromImportImportCall node);
    void caseACmodAsIdent(ACmodAsIdent node);
    void caseACidentAsIdent(ACidentAsIdent node);
    void caseAAsIdent(AAsIdent node);
    void caseAModule(AModule node);
    void caseAIdentDot(AIdentDot node);
    void caseACompAndComparisonOr(ACompAndComparisonOr node);
    void caseAOrComparisonOr(AOrComparisonOr node);
    void caseACompNotComparisonAnd(ACompNotComparisonAnd node);
    void caseAAndComparisonAnd(AAndComparisonAnd node);
    void caseAComparisonComparisonNot(AComparisonComparisonNot node);
    void caseAComparisonNot(AComparisonNot node);
    void caseAGreatComparison(AGreatComparison node);
    void caseALessComparison(ALessComparison node);
    void caseAGreatEqComparison(AGreatEqComparison node);
    void caseALessEqComparison(ALessEqComparison node);
    void caseANotEqComparison(ANotEqComparison node);
    void caseACompEqComparison(ACompEqComparison node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAArglist(AArglist node);
    void caseAFuncCallValue(AFuncCallValue node);
    void caseANumberValue(ANumberValue node);
    void caseADoubleQuoteStringValue(ADoubleQuoteStringValue node);
    void caseASingleQuoteStringValue(ASingleQuoteStringValue node);
    void caseANoneValue(ANoneValue node);

    void caseTTab(TTab node);
    void caseTPlus(TPlus node);
    void caseTMineq(TMineq node);
    void caseTMinus(TMinus node);
    void caseTPow(TPow node);
    void caseTMult(TMult node);
    void caseTDiveq(TDiveq node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTEqualEqual(TEqualEqual node);
    void caseTNotEqual(TNotEqual node);
    void caseTEq(TEq node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBra(TLBra node);
    void caseTRBra(TRBra node);
    void caseTComma(TComma node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTIf(TIf node);
    void caseTPrint(TPrint node);
    void caseTLessEqual(TLessEqual node);
    void caseTGreatEqual(TGreatEqual node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTElse(TElse node);
    void caseTDef(TDef node);
    void caseTLen(TLen node);
    void caseTAscii(TAscii node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTIn(TIn node);
    void caseTReturn(TReturn node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTAssert(TAssert node);
    void caseTAs(TAs node);
    void caseTImport(TImport node);
    void caseTFrom(TFrom node);
    void caseTNone(TNone node);
    void caseTDot(TDot node);
    void caseTQuote(TQuote node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseTStringSingleQuote(TStringSingleQuote node);
    void caseTStringDoubleQuote(TStringDoubleQuote node);
    void caseEOF(EOF node);
}
