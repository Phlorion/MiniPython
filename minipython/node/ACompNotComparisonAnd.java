/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ACompNotComparisonAnd extends PComparisonAnd
{
    private PComparisonNot _comparisonNot_;

    public ACompNotComparisonAnd()
    {
    }

    public ACompNotComparisonAnd(
        PComparisonNot _comparisonNot_)
    {
        setComparisonNot(_comparisonNot_);

    }
    public Object clone()
    {
        return new ACompNotComparisonAnd(
            (PComparisonNot) cloneNode(_comparisonNot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompNotComparisonAnd(this);
    }

    public PComparisonNot getComparisonNot()
    {
        return _comparisonNot_;
    }

    public void setComparisonNot(PComparisonNot node)
    {
        if(_comparisonNot_ != null)
        {
            _comparisonNot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comparisonNot_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comparisonNot_);
    }

    void removeChild(Node child)
    {
        if(_comparisonNot_ == child)
        {
            _comparisonNot_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_comparisonNot_ == oldChild)
        {
            setComparisonNot((PComparisonNot) newChild);
            return;
        }

    }
}
