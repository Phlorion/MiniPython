/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AListExpression extends PExpression
{
    private PValue _lvalue_;
    private final LinkedList _multVals_ = new TypedLinkedList(new MultVals_Cast());

    public AListExpression()
    {
    }

    public AListExpression(
        PValue _lvalue_,
        List _multVals_)
    {
        setLvalue(_lvalue_);

        {
            this._multVals_.clear();
            this._multVals_.addAll(_multVals_);
        }

    }
    public Object clone()
    {
        return new AListExpression(
            (PValue) cloneNode(_lvalue_),
            cloneList(_multVals_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListExpression(this);
    }

    public PValue getLvalue()
    {
        return _lvalue_;
    }

    public void setLvalue(PValue node)
    {
        if(_lvalue_ != null)
        {
            _lvalue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lvalue_ = node;
    }

    public LinkedList getMultVals()
    {
        return _multVals_;
    }

    public void setMultVals(List list)
    {
        _multVals_.clear();
        _multVals_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_lvalue_)
            + toString(_multVals_);
    }

    void removeChild(Node child)
    {
        if(_lvalue_ == child)
        {
            _lvalue_ = null;
            return;
        }

        if(_multVals_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lvalue_ == oldChild)
        {
            setLvalue((PValue) newChild);
            return;
        }

        for(ListIterator i = _multVals_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class MultVals_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PValue node = (PValue) o;

            if((node.parent() != null) &&
                (node.parent() != AListExpression.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AListExpression.this))
            {
                node.parent(AListExpression.this);
            }

            return node;
        }
    }
}
