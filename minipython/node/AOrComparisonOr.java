/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AOrComparisonOr extends PComparisonOr
{
    private PComparisonOr _comparisonOr_;
    private TOr _or_;
    private PComparisonAnd _comparisonAnd_;

    public AOrComparisonOr()
    {
    }

    public AOrComparisonOr(
        PComparisonOr _comparisonOr_,
        TOr _or_,
        PComparisonAnd _comparisonAnd_)
    {
        setComparisonOr(_comparisonOr_);

        setOr(_or_);

        setComparisonAnd(_comparisonAnd_);

    }
    public Object clone()
    {
        return new AOrComparisonOr(
            (PComparisonOr) cloneNode(_comparisonOr_),
            (TOr) cloneNode(_or_),
            (PComparisonAnd) cloneNode(_comparisonAnd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrComparisonOr(this);
    }

    public PComparisonOr getComparisonOr()
    {
        return _comparisonOr_;
    }

    public void setComparisonOr(PComparisonOr node)
    {
        if(_comparisonOr_ != null)
        {
            _comparisonOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comparisonOr_ = node;
    }

    public TOr getOr()
    {
        return _or_;
    }

    public void setOr(TOr node)
    {
        if(_or_ != null)
        {
            _or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _or_ = node;
    }

    public PComparisonAnd getComparisonAnd()
    {
        return _comparisonAnd_;
    }

    public void setComparisonAnd(PComparisonAnd node)
    {
        if(_comparisonAnd_ != null)
        {
            _comparisonAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comparisonAnd_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comparisonOr_)
            + toString(_or_)
            + toString(_comparisonAnd_);
    }

    void removeChild(Node child)
    {
        if(_comparisonOr_ == child)
        {
            _comparisonOr_ = null;
            return;
        }

        if(_or_ == child)
        {
            _or_ = null;
            return;
        }

        if(_comparisonAnd_ == child)
        {
            _comparisonAnd_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_comparisonOr_ == oldChild)
        {
            setComparisonOr((PComparisonOr) newChild);
            return;
        }

        if(_or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(_comparisonAnd_ == oldChild)
        {
            setComparisonAnd((PComparisonAnd) newChild);
            return;
        }

    }
}
