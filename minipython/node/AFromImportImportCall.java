/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AFromImportImportCall extends PImportCall
{
    private PModule _module_;
    private TId _id_;
    private final LinkedList _asIdent_ = new TypedLinkedList(new AsIdent_Cast());
    private final LinkedList _cidentAsIdent_ = new TypedLinkedList(new CidentAsIdent_Cast());

    public AFromImportImportCall()
    {
    }

    public AFromImportImportCall(
        PModule _module_,
        TId _id_,
        List _asIdent_,
        List _cidentAsIdent_)
    {
        setModule(_module_);

        setId(_id_);

        {
            this._asIdent_.clear();
            this._asIdent_.addAll(_asIdent_);
        }

        {
            this._cidentAsIdent_.clear();
            this._cidentAsIdent_.addAll(_cidentAsIdent_);
        }

    }
    public Object clone()
    {
        return new AFromImportImportCall(
            (PModule) cloneNode(_module_),
            (TId) cloneNode(_id_),
            cloneList(_asIdent_),
            cloneList(_cidentAsIdent_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFromImportImportCall(this);
    }

    public PModule getModule()
    {
        return _module_;
    }

    public void setModule(PModule node)
    {
        if(_module_ != null)
        {
            _module_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _module_ = node;
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public LinkedList getAsIdent()
    {
        return _asIdent_;
    }

    public void setAsIdent(List list)
    {
        _asIdent_.clear();
        _asIdent_.addAll(list);
    }

    public LinkedList getCidentAsIdent()
    {
        return _cidentAsIdent_;
    }

    public void setCidentAsIdent(List list)
    {
        _cidentAsIdent_.clear();
        _cidentAsIdent_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_module_)
            + toString(_id_)
            + toString(_asIdent_)
            + toString(_cidentAsIdent_);
    }

    void removeChild(Node child)
    {
        if(_module_ == child)
        {
            _module_ = null;
            return;
        }

        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_asIdent_.remove(child))
        {
            return;
        }

        if(_cidentAsIdent_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_module_ == oldChild)
        {
            setModule((PModule) newChild);
            return;
        }

        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator i = _asIdent_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _cidentAsIdent_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class AsIdent_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAsIdent node = (PAsIdent) o;

            if((node.parent() != null) &&
                (node.parent() != AFromImportImportCall.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFromImportImportCall.this))
            {
                node.parent(AFromImportImportCall.this);
            }

            return node;
        }
    }

    private class CidentAsIdent_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCidentAsIdent node = (PCidentAsIdent) o;

            if((node.parent() != null) &&
                (node.parent() != AFromImportImportCall.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFromImportImportCall.this))
            {
                node.parent(AFromImportImportCall.this);
            }

            return node;
        }
    }
}
