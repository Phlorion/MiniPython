/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AListElementExpression extends PExpression
{
    private TId _id_;
    private TLBra _lBra_;
    private PExpression _expression_;
    private TRBra _rBra_;

    public AListElementExpression()
    {
    }

    public AListElementExpression(
        TId _id_,
        TLBra _lBra_,
        PExpression _expression_,
        TRBra _rBra_)
    {
        setId(_id_);

        setLBra(_lBra_);

        setExpression(_expression_);

        setRBra(_rBra_);

    }
    public Object clone()
    {
        return new AListElementExpression(
            (TId) cloneNode(_id_),
            (TLBra) cloneNode(_lBra_),
            (PExpression) cloneNode(_expression_),
            (TRBra) cloneNode(_rBra_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListElementExpression(this);
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public TLBra getLBra()
    {
        return _lBra_;
    }

    public void setLBra(TLBra node)
    {
        if(_lBra_ != null)
        {
            _lBra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBra_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public TRBra getRBra()
    {
        return _rBra_;
    }

    public void setRBra(TRBra node)
    {
        if(_rBra_ != null)
        {
            _rBra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBra_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_id_)
            + toString(_lBra_)
            + toString(_expression_)
            + toString(_rBra_);
    }

    void removeChild(Node child)
    {
        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_lBra_ == child)
        {
            _lBra_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_rBra_ == child)
        {
            _rBra_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_lBra_ == oldChild)
        {
            setLBra((TLBra) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(_rBra_ == oldChild)
        {
            setRBra((TRBra) newChild);
            return;
        }

    }
}
