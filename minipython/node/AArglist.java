/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArglist extends PArglist
{
    private PExpression _l_;
    private final LinkedList _multExprs_ = new TypedLinkedList(new MultExprs_Cast());

    public AArglist()
    {
    }

    public AArglist(
        PExpression _l_,
        List _multExprs_)
    {
        setL(_l_);

        {
            this._multExprs_.clear();
            this._multExprs_.addAll(_multExprs_);
        }

    }
    public Object clone()
    {
        return new AArglist(
            (PExpression) cloneNode(_l_),
            cloneList(_multExprs_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArglist(this);
    }

    public PExpression getL()
    {
        return _l_;
    }

    public void setL(PExpression node)
    {
        if(_l_ != null)
        {
            _l_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _l_ = node;
    }

    public LinkedList getMultExprs()
    {
        return _multExprs_;
    }

    public void setMultExprs(List list)
    {
        _multExprs_.clear();
        _multExprs_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_l_)
            + toString(_multExprs_);
    }

    void removeChild(Node child)
    {
        if(_l_ == child)
        {
            _l_ = null;
            return;
        }

        if(_multExprs_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_l_ == oldChild)
        {
            setL((PExpression) newChild);
            return;
        }

        for(ListIterator i = _multExprs_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class MultExprs_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PExpression node = (PExpression) o;

            if((node.parent() != null) &&
                (node.parent() != AArglist.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AArglist.this))
            {
                node.parent(AArglist.this);
            }

            return node;
        }
    }
}
