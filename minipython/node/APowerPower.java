/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class APowerPower extends PPower
{
    private PFactor _factor_;
    private TPow _pow_;
    private PPower _power_;

    public APowerPower()
    {
    }

    public APowerPower(
        PFactor _factor_,
        TPow _pow_,
        PPower _power_)
    {
        setFactor(_factor_);

        setPow(_pow_);

        setPower(_power_);

    }
    public Object clone()
    {
        return new APowerPower(
            (PFactor) cloneNode(_factor_),
            (TPow) cloneNode(_pow_),
            (PPower) cloneNode(_power_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPowerPower(this);
    }

    public PFactor getFactor()
    {
        return _factor_;
    }

    public void setFactor(PFactor node)
    {
        if(_factor_ != null)
        {
            _factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _factor_ = node;
    }

    public TPow getPow()
    {
        return _pow_;
    }

    public void setPow(TPow node)
    {
        if(_pow_ != null)
        {
            _pow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _pow_ = node;
    }

    public PPower getPower()
    {
        return _power_;
    }

    public void setPower(PPower node)
    {
        if(_power_ != null)
        {
            _power_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _power_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_factor_)
            + toString(_pow_)
            + toString(_power_);
    }

    void removeChild(Node child)
    {
        if(_factor_ == child)
        {
            _factor_ = null;
            return;
        }

        if(_pow_ == child)
        {
            _pow_ = null;
            return;
        }

        if(_power_ == child)
        {
            _power_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        if(_pow_ == oldChild)
        {
            setPow((TPow) newChild);
            return;
        }

        if(_power_ == oldChild)
        {
            setPower((PPower) newChild);
            return;
        }

    }
}
