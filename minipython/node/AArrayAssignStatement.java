/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArrayAssignStatement extends PStatement
{
    private TId _id_;
    private PExpression _index_;
    private PExpression _rightSide_;

    public AArrayAssignStatement()
    {
    }

    public AArrayAssignStatement(
        TId _id_,
        PExpression _index_,
        PExpression _rightSide_)
    {
        setId(_id_);

        setIndex(_index_);

        setRightSide(_rightSide_);

    }
    public Object clone()
    {
        return new AArrayAssignStatement(
            (TId) cloneNode(_id_),
            (PExpression) cloneNode(_index_),
            (PExpression) cloneNode(_rightSide_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayAssignStatement(this);
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public PExpression getIndex()
    {
        return _index_;
    }

    public void setIndex(PExpression node)
    {
        if(_index_ != null)
        {
            _index_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _index_ = node;
    }

    public PExpression getRightSide()
    {
        return _rightSide_;
    }

    public void setRightSide(PExpression node)
    {
        if(_rightSide_ != null)
        {
            _rightSide_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rightSide_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_id_)
            + toString(_index_)
            + toString(_rightSide_);
    }

    void removeChild(Node child)
    {
        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_index_ == child)
        {
            _index_ = null;
            return;
        }

        if(_rightSide_ == child)
        {
            _rightSide_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_index_ == oldChild)
        {
            setIndex((PExpression) newChild);
            return;
        }

        if(_rightSide_ == oldChild)
        {
            setRightSide((PExpression) newChild);
            return;
        }

    }
}
