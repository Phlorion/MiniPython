/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ACompAndComparisonOr extends PComparisonOr
{
    private PComparisonAnd _comparisonAnd_;

    public ACompAndComparisonOr()
    {
    }

    public ACompAndComparisonOr(
        PComparisonAnd _comparisonAnd_)
    {
        setComparisonAnd(_comparisonAnd_);

    }
    public Object clone()
    {
        return new ACompAndComparisonOr(
            (PComparisonAnd) cloneNode(_comparisonAnd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompAndComparisonOr(this);
    }

    public PComparisonAnd getComparisonAnd()
    {
        return _comparisonAnd_;
    }

    public void setComparisonAnd(PComparisonAnd node)
    {
        if(_comparisonAnd_ != null)
        {
            _comparisonAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comparisonAnd_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comparisonAnd_);
    }

    void removeChild(Node child)
    {
        if(_comparisonAnd_ == child)
        {
            _comparisonAnd_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_comparisonAnd_ == oldChild)
        {
            setComparisonAnd((PComparisonAnd) newChild);
            return;
        }

    }
}
