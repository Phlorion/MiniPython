/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ASubtractionAddition extends PAddition
{
    private PAddition _addition_;
    private TMinus _minus_;
    private PMultiplication _multiplication_;

    public ASubtractionAddition()
    {
    }

    public ASubtractionAddition(
        PAddition _addition_,
        TMinus _minus_,
        PMultiplication _multiplication_)
    {
        setAddition(_addition_);

        setMinus(_minus_);

        setMultiplication(_multiplication_);

    }
    public Object clone()
    {
        return new ASubtractionAddition(
            (PAddition) cloneNode(_addition_),
            (TMinus) cloneNode(_minus_),
            (PMultiplication) cloneNode(_multiplication_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubtractionAddition(this);
    }

    public PAddition getAddition()
    {
        return _addition_;
    }

    public void setAddition(PAddition node)
    {
        if(_addition_ != null)
        {
            _addition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _addition_ = node;
    }

    public TMinus getMinus()
    {
        return _minus_;
    }

    public void setMinus(TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _minus_ = node;
    }

    public PMultiplication getMultiplication()
    {
        return _multiplication_;
    }

    public void setMultiplication(PMultiplication node)
    {
        if(_multiplication_ != null)
        {
            _multiplication_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _multiplication_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_addition_)
            + toString(_minus_)
            + toString(_multiplication_);
    }

    void removeChild(Node child)
    {
        if(_addition_ == child)
        {
            _addition_ = null;
            return;
        }

        if(_minus_ == child)
        {
            _minus_ = null;
            return;
        }

        if(_multiplication_ == child)
        {
            _multiplication_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_addition_ == oldChild)
        {
            setAddition((PAddition) newChild);
            return;
        }

        if(_minus_ == oldChild)
        {
            setMinus((TMinus) newChild);
            return;
        }

        if(_multiplication_ == oldChild)
        {
            setMultiplication((PMultiplication) newChild);
            return;
        }

    }
}
