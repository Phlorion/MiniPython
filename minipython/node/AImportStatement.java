/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AImportStatement extends PStatement
{
    private final LinkedList _tab_ = new TypedLinkedList(new Tab_Cast());
    private PImportCall _importCall_;

    public AImportStatement()
    {
    }

    public AImportStatement(
        List _tab_,
        PImportCall _importCall_)
    {
        {
            this._tab_.clear();
            this._tab_.addAll(_tab_);
        }

        setImportCall(_importCall_);

    }
    public Object clone()
    {
        return new AImportStatement(
            cloneList(_tab_),
            (PImportCall) cloneNode(_importCall_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAImportStatement(this);
    }

    public LinkedList getTab()
    {
        return _tab_;
    }

    public void setTab(List list)
    {
        _tab_.clear();
        _tab_.addAll(list);
    }

    public PImportCall getImportCall()
    {
        return _importCall_;
    }

    public void setImportCall(PImportCall node)
    {
        if(_importCall_ != null)
        {
            _importCall_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _importCall_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_tab_)
            + toString(_importCall_);
    }

    void removeChild(Node child)
    {
        if(_tab_.remove(child))
        {
            return;
        }

        if(_importCall_ == child)
        {
            _importCall_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _tab_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_importCall_ == oldChild)
        {
            setImportCall((PImportCall) newChild);
            return;
        }

    }

    private class Tab_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TTab node = (TTab) o;

            if((node.parent() != null) &&
                (node.parent() != AImportStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AImportStatement.this))
            {
                node.parent(AImportStatement.this);
            }

            return node;
        }
    }
}
