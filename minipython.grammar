Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 
	quote = '"';
	single_quote = ''';

Tokens
	tab = 9;
	plus = '+';
	mineq = '-=';
	minus = '-';
	pow = '**';
	mult = '*';
	diveq = '/=';
	div = '/';
	mod = '%';
	equal_equal = '==';
	not_equal = '!=';
	eq = '=';
	l_par = '(';
	r_par = ')';
	l_bra = '[';
	r_bra = ']';
	comma= ',';
	not = 'not';
	and = 'and';
	or = 'or';
	if = 'if';
	print = 'print';
	less_equal = '<=';
	great_equal = '>=';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	else = 'else';
	def = 'def';
	len = 'len';
	ascii = 'ascii';
	max = 'max';
	min = 'min';
	in = 'in';
	return = 'return';
	while = 'while';
	for = 'for';
	assert = 'assert';
	as = 'as';
	import = 'import';
	from = 'from';
	none = 'None';
	dot = '.';										// Na doume an mpainei katw apo number
	quote = '"';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+ | digit+ '.' digit+;  			// Erwthsh an thelei float
	id = letter (letter | digit)*;
	string_literal = quote [not_eol - quote]* quote | 
					single_quote [not_eol - single_quote]* single_quote;

Ignored Tokens
	blank, line_comment;  // Erwthsh gia comment
	
Productions
	programme = commands*;
	
	commands ={stat} statement|
				 {func}function;
	
	statement ={if}tab* if  comparison semi statement |
				{while}tab* while comparison semi statement |
				{for}tab* for [element]:id in [collection]:id semi statement |
				{return}tab* return expression |
				{print}tab* print expression comma_expression*|
				{assignop}tab* id assignop expression |
				{array_assign}tab* id l_bra [index]:expression r_bra eq [right_side]:expression |
				{assert}tab* assert expression comma_expression? |
				{func_call}tab* function_call |
				{import}tab* import_call;
				
	comma_expression = comma expression;

	assignop = {eq} eq |
				{mineq} mineq |
				{diveq} diveq;
	
	function = def id l_par arguements? r_par semi statement;

	arguements = id assignval? multipleargs*;

	multipleargs = comma id assignval?;

	assignval = eq value;
					 			 				
	expression = {multiplication} multiplication |
				{addition} expression plus multiplication |
				{subtraction} expression minus multiplication;
				
	multiplication = {multiplication} multiplication mult power |
						{division} multiplication div power |
						{modulo} multiplication mod power |
						{power} power;
						
	power = {power} power pow f_expression |
				{f_expression} f_expression;
				
	f_expression = 	{list_element} id l_bra f_expression r_bra |
					{funtion_call} function_call |
					{value} value |
					{id} id |
					{length} len l_par f_expression r_par |
					{ascii_val} ascii l_par f_expression r_par |
					{min_max} min_max l_par value multiple_values* r_par |
					{parenthesis_expression} l_par f_expression r_par |
					{list} l_bra value multiple_values* r_bra;

	min_max = {min} min |
				{max} max;
				
	multiple_values = comma value;

	import_call = {import} import module as_ident? cmod_as_ident*|
					{from_import} from module import id as_ident? cident_as_ident*;

	cmod_as_ident = comma module as_ident?;

	cident_as_ident = comma id as_ident?;

	as_ident = as id;

	module = ident_dot* id;

	ident_dot = id dot;

	comparison = {or} comparison or comparison_and|
					{comp_and} comparison_and;

	comparison_and = {and} comparison_and and comparison_not|
						{comp_not} comparison_not;
						

	comparison_not = {not} not f_comparison|
						{f_comparison} f_comparison;
						
	
	f_comparison = {great} [lexpr]:expression great [rexpr]: expression|
					{less} [lexpr]:expression less [rexpr]: expression|
					{great_eq} [lexpr]:expression great_equal [rexpr]: expression|
					{less_eq} [lexpr]:expression less_equal [rexpr]: expression|
					{not_eq} [lexpr]:expression not_equal [rexpr]: expression|
					{comp_eq} [lexpr]:expression equal_equal [rexpr]: expression|
					{true} true|
					{false} false;

	function_call = id l_par arglist? r_par;

	arglist = expression comma_expression*;

	value = {func_call} id dot function_call|
				{number} number_literal|
				{slit}string_literal|
				{none} none;

	number_literal = {nnumber} minus number|		// Erwthsh gia arnhtikous
				{pnumber} number;
