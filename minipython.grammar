// STOIXEIA OMADAS
// GASPARIS RIGOS - p3210174
// GEWRGIOS AVRABOS - p3210001
// GEWRGIOS SOROGKAS - p3210183

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 
	quote = '"';
	single_quote = ''';

Tokens
	tab = 9;
	plus = '+';
	mineq = '-=';
	minus = '-';
	pow = '**';
	mult = '*';
	diveq = '/=';
	div = '/';
	mod = '%';
	equal_equal = '==';
	not_equal = '!=';
	eq = '=';
	l_par = '(';
	r_par = ')';
	l_bra = '[';
	r_bra = ']';
	comma= ',';
	not = 'not';
	and = 'and';
	or = 'or';
	if = 'if';
	print = 'print';
	less_equal = '<=';
	great_equal = '>=';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	else = 'else';
	def = 'def';
	len = 'len';
	ascii = 'ascii';
	max = 'max';
	min = 'min';
	in = 'in';
	return = 'return';
	while = 'while';
	for = 'for';
	assert = 'assert';
	as = 'as';
	import = 'import';
	from = 'from';
	none = 'None';
	dot = '.';										
	quote = '"';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+ | digit+ '.' digit+;  			
	id = letter (letter | digit)*;
	string_literal = quote [not_eol - quote]* quote | 
					single_quote [not_eol - single_quote]* single_quote;

Ignored Tokens
	blank, line_comment; 
	
Productions
	programme = commands*{-> New programme([commands])};
	
	commands ={stat} statement{-> New commands.stat(statement)}|
				 {func}function{-> New commands.func(function)};
	
	statement ={if}tab* if  comparison_or semi statement{-> New statement.if(comparison_or.comparisons, statement)}| 	 //isws lathos to comparison se auta
				{while}tab* while comparison_or semi statement {-> New statement.while(comparison_or.comparisons, statement)}|
				{for}tab* for [element]:id in [collection]:id semi statement {-> New statement.for(element, collection, statement)}|
				{return}tab* return expression{-> New statement.return(expression)}|
				{print}tab* print expression comma_expression*{-> New statement.print(expression, [comma_expression.expression])}| 
				{assign_eq}tab* id eq expression {-> New statement.assign_eq(id, expression)}| 	//mporei na mh xreiazetai to assignop sth parenthesi
				{assign_mineq}tab* id mineq expression {-> New statement.assign_mineq(id, expression)}|
				{assign_diveq}tab* id diveq expression {-> New statement.assign_diveq(id, expression)}|
				{array_assign}tab* id l_bra [index]:expression r_bra eq [right_side]:expression {-> New statement.array_assign(id, index, right_side)}|
				{assert}tab* assert expression comma_expression? {-> New statement.assert(expression, [comma_expression.expression])}|
				{func_call}tab* function_call {-> New statement.func_call(function_call)}| 	//den eimai sigouros ama thelei to geniko function_call h to aplopoihmeno
				{import}tab* import_call {-> New statement.import(import_call)}; 	// omoiws me panw

	//isws lathos ta comma expr anagwgh se expr
	comma_expression{-> expression} = comma expression {-> expression};

	function = def id l_par arguements? r_par semi statement {-> New function(id, [arguements], statement)};

	arguements = id assignval? multipleargs* {-> New arguements(id, [assignval.value], [multipleargs])};

	multipleargs = comma id assignval?{-> New multipleargs(id,[assignval.value])};   //isws thelei right side ast production

	assignval {-> value} = eq value {-> value};
					 			 				
	expression = {multiplication} multiplication {-> multiplication.expression}|
				{addition} expression plus multiplication {-> New expression.addition(expression, multiplication.expression)}|
				{subtraction} expression minus multiplication {-> New expression.subtraction(expression, multiplication.expression)};
				
	multiplication{->expression} = {multiplication} multiplication mult power {-> New expression.multiplication(multiplication.expression, power.expression)}|
						{division} multiplication div power {-> New expression.division(multiplication.expression, power.expression)}|
						{modulo} multiplication mod power {-> New expression.modulo(multiplication.expression, power.expression)}|
						{power} power {-> power.expression};
						
	power{->expression} = {power} power pow f_expression {-> New expression.power(power.expression, f_expression.expression)}|
				{f_expression} f_expression {-> f_expression.expression};
				
	f_expression{-> expression} = {list_element} id l_bra expression r_bra {-> New expression.list_element(id,expression)}|
					{funtion_call} function_call {-> New expression.function_call(function_call.function_call)}|
					{value} value {-> New expression.value(value)}|
					{id} id {-> New expression.id(id)}|
					{length} len l_par expression r_par {-> New expression.length(expression)}|
					{ascii_val} ascii l_par expression r_par {-> New expression.ascii_val(expression)}|
					{min} min l_par value multiple_values* r_par {-> New expression.min(value, [multiple_values.value])}|
					{max} max l_par value multiple_values* r_par {-> New expression.max(value, [multiple_values.value])}|
					{parenthesis_expression} l_par expression r_par {-> New expression.parenthesis_expression(expression)}|
					{list} l_bra value multiple_values* r_bra {-> New expression.list(value, [multiple_values.value])};
		
	multiple_values{-> value} = comma value {-> value};

	import_call = {import} import module as_ident? cmod_as_ident* {->New import_call.import(module,[as_ident],[cmod_as_ident])}|
					{from_import} from module import id as_ident? cident_as_ident* {->New import_call.from_import(module,id,[as_ident],[cident_as_ident])};

	cmod_as_ident = comma module as_ident? {->New cmod_as_ident(module,[as_ident])};

	cident_as_ident = comma id as_ident? {->New cident_as_ident(id,[as_ident])};

	as_ident = as id {->New as_ident(id)};

	module = ident_dot* id {->New module([ident_dot],id)};

	ident_dot = id dot {->New ident_dot(id)};

	comparison_or{->comparisons} = {or} comparison_or or comparison_and {-> New comparisons.or(comparison_or.comparisons,comparison_and.comparisons)}|
					{comp_and} comparison_and{->comparison_and.comparisons};

	comparison_and{->comparisons} = {and} comparison_and and comparison_not {-> New comparisons.and(comparison_and.comparisons,comparison_not.comparisons)}|
						{comp_not} comparison_not{->comparison_not.comparisons};
						

	comparison_not{->comparisons} = {not} not comparison {-> New comparisons.not(comparison.comparisons)}|
						{comparison} comparison {->comparison.comparisons};
						
	
	comparison{->comparisons} = {great} [lexpr]:expression great [rexpr]: expression {->New comparisons.great(lexpr,rexpr)}|
					{less} [lexpr]:expression less [rexpr]: expression {->New comparisons.less(lexpr,rexpr)}|
					{great_eq} [lexpr]:expression great_equal [rexpr]: expression {->New comparisons.great_eq(lexpr,rexpr)}|
					{less_eq} [lexpr]:expression less_equal [rexpr]: expression {->New comparisons.less_eq(lexpr,rexpr)}|
					{not_eq} [lexpr]:expression not_equal [rexpr]: expression {->New comparisons.not_eq(lexpr,rexpr)}|
					{comp_eq} [lexpr]:expression equal_equal [rexpr]: expression {->New comparisons.comp_eq(lexpr,rexpr)}|
					{true} true {-> New comparisons.true()}|
					{false} false {-> New comparisons.false()};

	function_call = id l_par arglist? r_par {-> New function_call(id,[arglist])};

	arglist = expression comma_expression* {-> New arglist(expression,[comma_expression.expression])}; 
	
	value = {func_call} id dot function_call {-> New value.func_call(id,function_call)}|
				{number} number {-> New value.number(number)}|
				{slit}string_literal {-> New value.slit(string_literal)}|					
				{none} none {-> New value.none(none)};

Abstract Syntax Tree

	
	programme = commands*;
	
	commands ={stat} statement|
				 {func}function;

	statement ={if}comparisons statement|
					{while}comparisons statement|
					{for}[element]:id [collection]:id statement|
					{return}expression|
					{print}[l]:expression [comma_exp]:expression*| 
					{assign_eq}id expression| 
					{assign_mineq}id expression|
					{assign_diveq}id expression|
					{array_assign}id [index]:expression [right_side]:expression|
					{assert} [l]:expression [comma_exp]:expression*|
					{func_call}function_call|
					{import}import_call;

	function = id arguements* statement;

	arguements = id value* multipleargs*;

	multipleargs =  id value*;

	expression = {addition} [l]:expression [r]:expression |
					{subtraction} [l]:expression [r]:expression |
					{multiplication} [l]:expression [r]:expression |
					{division} [l]:expression [r]:expression |
					{modulo} [l]:expression [r]:expression |
					{power} [l]:expression [r]:expression |
					{list_element} id expression |
					{function_call} function_call |
					{value} value |
					{id} id |
					{length} expression |
					{ascii_val} expression |
					{min} [lvalue]:value [mult_vals]:value* |
					{max} [lvalue]:value [mult_vals]:value* |
					{parenthesis_expression} expression |
					{list} [lvalue]:value [mult_vals]:value*;

	import_call = {import} module as_ident* cmod_as_ident* |
						{from_import} module id as_ident* cident_as_ident*;

	cmod_as_ident = module as_ident*;

	cident_as_ident = id as_ident*;

	as_ident = id;

	module = ident_dot* id;

	ident_dot = id;

	comparisons = {or} [c1]:comparisons [c2]:comparisons|
					{and} [c1]: comparisons [c2]: comparisons|
					{not} comparisons|
					{great} [lexpr]:expression [rexpr]: expression|
					{less} [lexpr]:expression [rexpr]: expression|
					{great_eq} [lexpr]:expression [rexpr]: expression|
					{less_eq} [lexpr]:expression [rexpr]: expression|
					{not_eq} [lexpr]:expression [rexpr]: expression|
					{comp_eq} [lexpr]:expression [rexpr]: expression|
					{true} |
					{false} ;

	function_call = id arglist*;

	arglist = [l]:expression [mult_exprs]:expression*;

	value = {func_call} id function_call|
				{number} number|
				{slit} string_literal|
				{none} none;		